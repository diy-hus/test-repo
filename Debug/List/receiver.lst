
AVRASM ver. 2.1.30  D:\Dropbox\2019\Project\Singapore\Code\re\Debug\List\receiver.asm Mon Aug 26 15:48:52 2019

D:\Dropbox\2019\Project\Singapore\Code\re\Debug\List\receiver.asm(1086): warning: Register r5 already defined by the .DEF directive
D:\Dropbox\2019\Project\Singapore\Code\re\Debug\List\receiver.asm(1087): warning: Register r4 already defined by the .DEF directive
D:\Dropbox\2019\Project\Singapore\Code\re\Debug\List\receiver.asm(1088): warning: Register r7 already defined by the .DEF directive
D:\Dropbox\2019\Project\Singapore\Code\re\Debug\List\receiver.asm(1089): warning: Register r8 already defined by the .DEF directive
D:\Dropbox\2019\Project\Singapore\Code\re\Debug\List\receiver.asm(1090): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Code_tay_cam=R5
                 	.DEF _xx=R4
                 	.DEF _p=R7
                 	.DEF _dem=R8
                 	.DEF _dem_msb=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c019      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 c0c5      	RJMP _timer0_ovf_isr
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000013 5300
000014 0000      	.DB  0x0,0x53,0x0,0x0
000015 0000      	.DB  0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
000016 0006      	.DW  0x06
000017 0004      	.DW  0x04
000018 0026      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000019 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00001a 94f8      	CLI
00001b 27ee      	CLR  R30
00001c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00001d e0f1      	LDI  R31,1
00001e bffb      	OUT  GICR,R31
00001f bfeb      	OUT  GICR,R30
000020 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000021 e08d      	LDI  R24,(14-2)+1
000022 e0a2      	LDI  R26,2
000023 27bb      	CLR  R27
                 __CLEAR_REG:
000024 93ed      	ST   X+,R30
000025 958a      	DEC  R24
000026 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000027 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000028 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000029 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00002a 93ed      	ST   X+,R30
00002b 9701      	SBIW R24,1
00002c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00002d e2ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00002e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00002f 9185      	LPM  R24,Z+
000030 9195      	LPM  R25,Z+
000031 9700      	SBIW R24,0
000032 f061      	BREQ __GLOBAL_INI_END
000033 91a5      	LPM  R26,Z+
000034 91b5      	LPM  R27,Z+
000035 9005      	LPM  R0,Z+
000036 9015      	LPM  R1,Z+
000037 01bf      	MOVW R22,R30
000038 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000039 9005      	LPM  R0,Z+
00003a 920d      	ST   X+,R0
00003b 9701      	SBIW R24,1
00003c f7e1      	BRNE __GLOBAL_INI_LOOP
00003d 01fb      	MOVW R30,R22
00003e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00003f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000040 bfed      	OUT  SPL,R30
000041 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000042 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000043 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000044 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000045 c0b6      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;unsigned char Code_tay_cam = 0x53;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include "rf.c"
                 ;#define CE PORTC.0      //23
                 ;#define CSN PORTC.1     //24
                 ;#define SCK PORTC.2     //25
                 ;#define MOSI PORTC.3    //26
                 ;#define MISO PINC.4     //27
                 ;#define IRQ PINC.5      //28
                 ;//--------------*---------------
                 ;unsigned char SPI_RW(unsigned char Buff);                                       //Function used for text moving
                 ;unsigned char SPI_Read(void);
                 ;void RF_Init();                                                                 //Function allow to Initialize RF device
                 ;void RF_Write(unsigned char Reg_Add, unsigned char Value);                      //Function to write a value to a registe ...
                 ;void RF_Command(unsigned char command);                                         //Function to write a command
                 ;void RF_Write_Address(unsigned char Address);                                   //Function to write TX and RX address
                 ;void RX_Mode();                                                          //Function to put nRF in RX mode
                 ;void RF_Config();                                                               //Function to config the nRF
                 ;unsigned char RF_RX_Read();                                                     //Function to read the data from RX FIFO
                 ;
                 ;unsigned char SPI_RW(unsigned char Buff)
                 ; 0000 0004 {
                 
                 	.CSEG
                 _SPI_RW:
                 ; .FSTART _SPI_RW
                 ;    unsigned char bit_ctr;
                 ;       for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
000046 93aa      	ST   -Y,R26
000047 931a      	ST   -Y,R17
                 ;	Buff -> Y+1
                 ;	bit_ctr -> R17
000048 e010      	LDI  R17,LOW(0)
                 _0x4:
000049 3018      	CPI  R17,8
00004a f488      	BRSH _0x5
                 ;       {
                 ;        MOSI = (Buff & 0x80);         // output 'uchar', MSB to MOSI
00004b 81e9      	LDD  R30,Y+1
00004c 78e0      	ANDI R30,LOW(0x80)
00004d f411      	BRNE _0x6
00004e 98ab      	CBI  0x15,3
00004f c001      	RJMP _0x7
                 _0x6:
000050 9aab      	SBI  0x15,3
                 _0x7:
                 ;        delay_us(5);
000051 d0ea      	RCALL SUBOPT_0x0
                 ;        Buff = (Buff << 1);           // shift next bit into MSB..
000052 81e9      	LDD  R30,Y+1
000053 0fee      	LSL  R30
000054 83e9      	STD  Y+1,R30
                 ;        SCK = 1;                      // Set SCK high..
000055 d0ea      	RCALL SUBOPT_0x1
                 ;        delay_us(5);
                 ;        Buff |= MISO;                 // capture current MISO bit
000056 81a9      	LDD  R26,Y+1
000057 2bea      	OR   R30,R26
000058 83e9      	STD  Y+1,R30
                 ;        SCK = 0;                      // ..then set SCK low again
000059 98aa      	CBI  0x15,2
                 ;       }
00005a 5f1f      	SUBI R17,-1
00005b cfed      	RJMP _0x4
                 _0x5:
                 ;    return(Buff);                     // return read uchar
00005c 81e9      	LDD  R30,Y+1
00005d 8118      	LDD  R17,Y+0
00005e c01f      	RJMP _0x2000002
                 ;}
                 ; .FEND
                 ;unsigned char SPI_Read(void)
                 ;{   unsigned char Buff=0;
                 _SPI_Read:
                 ; .FSTART _SPI_Read
                 ;    unsigned char bit_ctr;
                 ;       for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
00005f d103      	RCALL __SAVELOCR2
                 ;	Buff -> R17
                 ;	bit_ctr -> R16
000060 e010      	LDI  R17,0
000061 e000      	LDI  R16,LOW(0)
                 _0xD:
000062 3008      	CPI  R16,8
000063 f438      	BRSH _0xE
                 ;       {
                 ;        delay_us(5);
000064 d0d7      	RCALL SUBOPT_0x0
                 ;        Buff = (Buff << 1);           // shift next bit into MSB..
000065 0f11      	LSL  R17
                 ;        SCK = 1;                      // Set SCK high..
000066 d0d9      	RCALL SUBOPT_0x1
                 ;        delay_us(5);
                 ;        Buff |= MISO;                 // capture current MISO bit
000067 2b1e      	OR   R17,R30
                 ;        SCK = 0;                      // ..then set SCK low again
000068 98aa      	CBI  0x15,2
                 ;       }
000069 5f0f      	SUBI R16,-1
00006a cff7      	RJMP _0xD
                 _0xE:
                 ;    return(Buff);                     // return read uchar
00006b 2fe1      	MOV  R30,R17
00006c 9109      	LD   R16,Y+
00006d 9119      	LD   R17,Y+
00006e 9508      	RET
                 ;}
                 ; .FEND
                 ;void RF_Init()                                                    //Function allow to Initialize RF device
                 ;{
                 _RF_Init:
                 ; .FSTART _RF_Init
                 ;    CE=1;
00006f 9aa8      	SBI  0x15,0
                 ;    delay_us(700);
                +
000070 e788     +LDI R24 , LOW ( 1400 )
000071 e095     +LDI R25 , HIGH ( 1400 )
                +__DELAY_USW_LOOP :
000072 9701     +SBIW R24 , 1
000073 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1400
                 ;    CE=0;
000074 98a8      	CBI  0x15,0
                 ;    CSN=1;
000075 9aa9      	SBI  0x15,1
                 ;}
000076 9508      	RET
                 ; .FEND
                 ;void RF_Write(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
                 ;{
                 _RF_Write:
                 ; .FSTART _RF_Write
                 ;    CSN=0;
000077 93aa      	ST   -Y,R26
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
000078 98a9      	CBI  0x15,1
                 ;    SPI_RW(0b00100000|Reg_Add);
000079 81e9      	LDD  R30,Y+1
00007a 62e0      	ORI  R30,0x20
00007b 2fae      	MOV  R26,R30
00007c d0c9      	RCALL SUBOPT_0x2
                 ;    SPI_RW(Value);
                 ;    CSN=1;
00007d d0cb      	RCALL SUBOPT_0x3
                 ;    delay_us(10);
                 ;}
                 _0x2000002:
00007e 9622      	ADIW R28,2
00007f 9508      	RET
                 ; .FEND
                 ;void RF_Command(unsigned char command)                            //Function to write a command
                 ;{
                 _RF_Command:
                 ; .FSTART _RF_Command
                 ;    CSN=0;
000080 93aa      	ST   -Y,R26
                 ;	command -> Y+0
000081 98a9      	CBI  0x15,1
                 ;    SPI_RW(command);
000082 c016      	RJMP _0x2000001
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;}
                 ; .FEND
                 ;void RF_Write_Address(unsigned char Address)                      //Function to write TX and RX address
                 ;{
                 _RF_Write_Address:
                 ; .FSTART _RF_Write_Address
                 ;    CSN=0;
000083 93aa      	ST   -Y,R26
                 ;	Address -> Y+0
000084 98a9      	CBI  0x15,1
                 ;    RF_Write(0x03,0b00000011);
000085 e0e3      	LDI  R30,LOW(3)
000086 93ea      	ST   -Y,R30
000087 e0a3      	LDI  R26,LOW(3)
000088 dfee      	RCALL _RF_Write
                 ;    CSN=1;
000089 d0bf      	RCALL SUBOPT_0x3
                 ;    delay_us(10);
                 ;    CSN=0;
00008a 98a9      	CBI  0x15,1
                 ;    SPI_RW(0b00100000|0x0A);
00008b e2aa      	LDI  R26,LOW(42)
00008c d0b9      	RCALL SUBOPT_0x2
                 ;    SPI_RW(Address);
                 ;    SPI_RW(Address);
00008d 81a8      	LD   R26,Y
00008e d0b7      	RCALL SUBOPT_0x2
                 ;    SPI_RW(Address);
                 ;    SPI_RW(Address);
00008f 81a8      	LD   R26,Y
000090 d0b5      	RCALL SUBOPT_0x2
                 ;    SPI_RW(Address);
                 ;    CSN=1;
000091 d0b7      	RCALL SUBOPT_0x3
                 ;    delay_us(10);
                 ;    CSN=0;
000092 98a9      	CBI  0x15,1
                 ;    SPI_RW(0b00100000|0x10);
000093 e3a0      	LDI  R26,LOW(48)
000094 d0b1      	RCALL SUBOPT_0x2
                 ;    SPI_RW(Address);
                 ;    SPI_RW(Address);
000095 81a8      	LD   R26,Y
000096 d0af      	RCALL SUBOPT_0x2
                 ;    SPI_RW(Address);
                 ;    SPI_RW(Address);
000097 81a8      	LD   R26,Y
000098 dfad      	RCALL _SPI_RW
                 ;    SPI_RW(Address);
                 _0x2000001:
000099 81a8      	LD   R26,Y
00009a dfab      	RCALL _SPI_RW
                 ;    CSN=1;
00009b d0ad      	RCALL SUBOPT_0x3
                 ;    delay_us(10);
                 ;}
00009c 9621      	ADIW R28,1
00009d 9508      	RET
                 ; .FEND
                 ;
                 ;void RX_Mode()                                             //Function to put nRF in RX mode
                 ;{
                 _RX_Mode:
                 ; .FSTART _RX_Mode
                 ;    RF_Write(0x00,0b00011111);     //CONFIG 0x00
00009e d0af      	RCALL SUBOPT_0x4
                 ;    CE=1;
00009f 9aa8      	SBI  0x15,0
                 ;}
0000a0 9508      	RET
                 ; .FEND
                 ;
                 ;void RF_Config()                                                  //Function to config the nRF
                 ;{
                 _RF_Config:
                 ; .FSTART _RF_Config
                 ;RF_Command(0b11100010);     //Flush RX
0000a1 eea2      	LDI  R26,LOW(226)
0000a2 dfdd      	RCALL _RF_Command
                 ;delay_us(10);
                +
0000a3 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000a4 958a     +DEC R24
0000a5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ;RF_Write(0x00,0b00011111);     //CONFIG 0x00
0000a6 d0a7      	RCALL SUBOPT_0x4
                 ;delay_ms(2);
0000a7 e0a2      	LDI  R26,LOW(2)
0000a8 e0b0      	LDI  R27,0
0000a9 d0af      	RCALL _delay_ms
                 ;RF_Write(0x07,0b01111110);
0000aa d0a7      	RCALL SUBOPT_0x5
                 ;RF_Write(0x11,0b00000001);     //RX_PW_P0 0x11     Payload size
0000ab e1e1      	LDI  R30,LOW(17)
0000ac d0a9      	RCALL SUBOPT_0x6
                 ;RF_Write(0x05,0b00000010);     //RF_CH 0x05        Choose frequency channel
0000ad e0e5      	LDI  R30,LOW(5)
0000ae 93ea      	ST   -Y,R30
0000af e0a2      	LDI  R26,LOW(2)
0000b0 dfc6      	RCALL _RF_Write
                 ;RF_Write_Address(Code_tay_cam);
0000b1 2da5      	MOV  R26,R5
0000b2 dfd0      	RCALL _RF_Write_Address
                 ;RF_Write(0x02,0b00000001);     //EX_RXADDR 0x02    enable data pipe 0;
0000b3 e0e2      	LDI  R30,LOW(2)
0000b4 d0a1      	RCALL SUBOPT_0x6
                 ;RF_Write(0x01,0b00000001);     //EN_AA 0x01        enable auto-acknowledgment
0000b5 e0e1      	LDI  R30,LOW(1)
0000b6 d09f      	RCALL SUBOPT_0x6
                 ;RF_Write(0x04,0b00000000);     //SETUP_RETR 0x04   Setup retry time
0000b7 e0e4      	LDI  R30,LOW(4)
0000b8 93ea      	ST   -Y,R30
0000b9 e0a0      	LDI  R26,LOW(0)
0000ba dfbc      	RCALL _RF_Write
                 ;}
0000bb 9508      	RET
                 ; .FEND
                 ;unsigned char RF_RX_Read()                                         //Function to read the data from RX FIFO
                 ;{
                 _RF_RX_Read:
                 ; .FSTART _RF_RX_Read
                 ;   unsigned char dem_RX;
                 ;   CE=0;
0000bc 931a      	ST   -Y,R17
                 ;	dem_RX -> R17
0000bd 98a8      	CBI  0x15,0
                 ;   CSN=1;
0000be d08a      	RCALL SUBOPT_0x3
                 ;   delay_us(10);
                 ;   CSN=0;
0000bf 98a9      	CBI  0x15,1
                 ;   SPI_RW(0b01100001);
0000c0 e6a1      	LDI  R26,LOW(97)
0000c1 df84      	RCALL _SPI_RW
                 ;   delay_us(10);
                +
0000c2 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000c3 958a     +DEC R24
0000c4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ;   dem_RX = SPI_Read();
0000c5 df99      	RCALL _SPI_Read
0000c6 2f1e      	MOV  R17,R30
                 ;   CSN=1;
0000c7 9aa9      	SBI  0x15,1
                 ;   CE=1;
0000c8 9aa8      	SBI  0x15,0
                 ;   RF_Write(0x07,0b01111110);  // Clear flag
0000c9 d088      	RCALL SUBOPT_0x5
                 ;   RF_Command(0b11100010);     //Flush RX
0000ca eea2      	LDI  R26,LOW(226)
0000cb dfb4      	RCALL _RF_Command
                 ;   return dem_RX;
0000cc 2fe1      	MOV  R30,R17
0000cd 9119      	LD   R17,Y+
0000ce 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;#define     green_led   PORTD.0
                 ;#define     blue_led    PORTD.1
                 ;#define     red_led     PORTD.2
                 ;
                 ;unsigned char xx=0;
                 ;unsigned char p=0;
                 ;unsigned int dem=0;
                 ;
                 ;void alert();
                 ;void normal();
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0012 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0000cf 920a      	ST   -Y,R0
0000d0 921a      	ST   -Y,R1
0000d1 92fa      	ST   -Y,R15
0000d2 936a      	ST   -Y,R22
0000d3 937a      	ST   -Y,R23
0000d4 938a      	ST   -Y,R24
0000d5 939a      	ST   -Y,R25
0000d6 93aa      	ST   -Y,R26
0000d7 93ba      	ST   -Y,R27
0000d8 93ea      	ST   -Y,R30
0000d9 93fa      	ST   -Y,R31
0000da b7ef      	IN   R30,SREG
0000db 93ea      	ST   -Y,R30
                 ; 0000 0013     TCNT0=0x83; //  1ms
0000dc e8e3      	LDI  R30,LOW(131)
0000dd bfe2      	OUT  0x32,R30
                 ; 0000 0014     if (p==1)
0000de e0e1      	LDI  R30,LOW(1)
0000df 15e7      	CP   R30,R7
0000e0 f421      	BRNE _0x39
                 ; 0000 0015         {
                 ; 0000 0016             alert();
0000e1 d03e      	RCALL _alert
                 ; 0000 0017             dem++;
0000e2 01f4      	MOVW R30,R8
0000e3 9631      	ADIW R30,1
0000e4 014f      	MOVW R8,R30
                 ; 0000 0018         }
                 ; 0000 0019     if (dem==2000)
                 _0x39:
0000e5 ede0      	LDI  R30,LOW(2000)
0000e6 e0f7      	LDI  R31,HIGH(2000)
0000e7 15e8      	CP   R30,R8
0000e8 05f9      	CPC  R31,R9
0000e9 f421      	BRNE _0x3A
                 ; 0000 001A         {
                 ; 0000 001B             normal();
0000ea d049      	RCALL _normal
                 ; 0000 001C             dem=0;
0000eb 2488      	CLR  R8
0000ec 2499      	CLR  R9
                 ; 0000 001D             p=0;
0000ed 2477      	CLR  R7
                 ; 0000 001E         }
                 ; 0000 001F 
                 ; 0000 0020 }
                 _0x3A:
0000ee 91e9      	LD   R30,Y+
0000ef bfef      	OUT  SREG,R30
0000f0 91f9      	LD   R31,Y+
0000f1 91e9      	LD   R30,Y+
0000f2 91b9      	LD   R27,Y+
0000f3 91a9      	LD   R26,Y+
0000f4 9199      	LD   R25,Y+
0000f5 9189      	LD   R24,Y+
0000f6 9179      	LD   R23,Y+
0000f7 9169      	LD   R22,Y+
0000f8 90f9      	LD   R15,Y+
0000f9 9019      	LD   R1,Y+
0000fa 9009      	LD   R0,Y+
0000fb 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0023 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0024 
                 ; 0000 0025 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000fc e0e0      	LDI  R30,LOW(0)
0000fd bbe7      	OUT  0x17,R30
                 ; 0000 0026 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000fe bbe8      	OUT  0x18,R30
                 ; 0000 0027 
                 ; 0000 0028 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000ff e0ef      	LDI  R30,LOW(15)
000100 bbe4      	OUT  0x14,R30
                 ; 0000 0029 PORTC=(0<<PORTC6) | (1<<PORTC5) | (10<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
000101 eaef      	LDI  R30,LOW(175)
000102 bbe5      	OUT  0x15,R30
                 ; 0000 002A 
                 ; 0000 002B DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000103 e0e7      	LDI  R30,LOW(7)
000104 bbe1      	OUT  0x11,R30
                 ; 0000 002C PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000105 e0e0      	LDI  R30,LOW(0)
000106 bbe2      	OUT  0x12,R30
                 ; 0000 002D 
                 ; 0000 002E TCCR0=(0<<CS02) | (1<<CS01) | (1<<CS00);
000107 e0e3      	LDI  R30,LOW(3)
000108 bfe3      	OUT  0x33,R30
                 ; 0000 002F TCNT0=0x83;
000109 e8e3      	LDI  R30,LOW(131)
00010a bfe2      	OUT  0x32,R30
                 ; 0000 0030 
                 ; 0000 0031 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
00010b e0e1      	LDI  R30,LOW(1)
00010c bfe9      	OUT  0x39,R30
                 ; 0000 0032 
                 ; 0000 0033 #asm("sei")
00010d 9478      	sei
                 ; 0000 0034 RF_Config();
00010e df92      	RCALL _RF_Config
                 ; 0000 0035 RF_Init();
00010f df5f      	RCALL _RF_Init
                 ; 0000 0036 
                 ; 0000 0037 while (1)
                 _0x3B:
                 ; 0000 0038       {
                 ; 0000 0039         RX_Mode();
000110 df8d      	RCALL _RX_Mode
                 ; 0000 003A             if(IRQ==0)
000111 999d      	SBIC 0x13,5
000112 c00b      	RJMP _0x3E
                 ; 0000 003B             {
                 ; 0000 003C                 xx=RF_RX_Read();
000113 dfa8      	RCALL _RF_RX_Read
000114 2e4e      	MOV  R4,R30
                 ; 0000 003D                 if (xx==0)
000115 2044      	TST  R4
000116 f411      	BRNE _0x3F
                 ; 0000 003E                     {
                 ; 0000 003F                         p=1;
000117 e0e1      	LDI  R30,LOW(1)
000118 2e7e      	MOV  R7,R30
                 ; 0000 0040                     }
                 ; 0000 0041                 if (xx==1)
                 _0x3F:
000119 e0e1      	LDI  R30,LOW(1)
00011a 15e4      	CP   R30,R4
00011b f411      	BRNE _0x40
                 ; 0000 0042                     {
                 ; 0000 0043                         p=2;
00011c e0e2      	LDI  R30,LOW(2)
00011d 2e7e      	MOV  R7,R30
                 ; 0000 0044                     }
                 ; 0000 0045             }
                 _0x40:
                 ; 0000 0046       }
                 _0x3E:
00011e cff1      	RJMP _0x3B
                 ; 0000 0047 }
                 _0x41:
00011f cfff      	RJMP _0x41
                 ; .FEND
                 ;
                 ;void alert()
                 ; 0000 004A {
                 _alert:
                 ; .FSTART _alert
                 ; 0000 004B   green_led =   0;
000120 9890      	CBI  0x12,0
                 ; 0000 004C   blue_led  =   !red_led;  //toggle state
000121 9b92      	SBIS 0x12,2
000122 c002      	RJMP _0x44
000123 9891      	CBI  0x12,1
000124 c001      	RJMP _0x45
                 _0x44:
000125 9a91      	SBI  0x12,1
                 _0x45:
                 ; 0000 004D   blue_led  =   !blue_led;
000126 9b91      	SBIS 0x12,1
000127 c002      	RJMP _0x46
000128 9891      	CBI  0x12,1
000129 c001      	RJMP _0x47
                 _0x46:
00012a 9a91      	SBI  0x12,1
                 _0x47:
                 ; 0000 004E   red_led   =   !red_led;
00012b 9b92      	SBIS 0x12,2
00012c c002      	RJMP _0x48
00012d 9892      	CBI  0x12,2
00012e c001      	RJMP _0x49
                 _0x48:
00012f 9a92      	SBI  0x12,2
                 _0x49:
                 ; 0000 004F   delay_ms(250);
000130 efaa      	LDI  R26,LOW(250)
000131 e0b0      	LDI  R27,0
000132 d026      	RCALL _delay_ms
                 ; 0000 0050 }
000133 9508      	RET
                 ; .FEND
                 ;void normal()
                 ; 0000 0052 {
                 _normal:
                 ; .FSTART _normal
                 ; 0000 0053     blue_led  =   0;
000134 9891      	CBI  0x12,1
                 ; 0000 0054     red_led   =   0;
000135 9892      	CBI  0x12,2
                 ; 0000 0055     green_led   =   !green_led;
000136 9b90      	SBIS 0x12,0
000137 c002      	RJMP _0x4E
000138 9890      	CBI  0x12,0
000139 c001      	RJMP _0x4F
                 _0x4E:
00013a 9a90      	SBI  0x12,0
                 _0x4F:
                 ; 0000 0056 }
00013b 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
                +
00013c e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00013d 958a     +DEC R24
00013e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00013f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
000140 9aaa      	SBI  0x15,2
000141 dffa      	RCALL SUBOPT_0x0
000142 e0e0      	LDI  R30,0
000143 999c      	SBIC 0x13,4
000144 e0e1      	LDI  R30,1
000145 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x2:
000146 deff      	RCALL _SPI_RW
000147 81a8      	LD   R26,Y
000148 cefd      	RJMP _SPI_RW
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x3:
000149 9aa9      	SBI  0x15,1
                +
00014a e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00014b 958a     +DEC R24
00014c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
00014d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00014e e0e0      	LDI  R30,LOW(0)
00014f 93ea      	ST   -Y,R30
000150 e1af      	LDI  R26,LOW(31)
000151 cf25      	RJMP _RF_Write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000152 e0e7      	LDI  R30,LOW(7)
000153 93ea      	ST   -Y,R30
000154 e7ae      	LDI  R26,LOW(126)
000155 cf21      	RJMP _RF_Write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
000156 93ea      	ST   -Y,R30
000157 e0a1      	LDI  R26,LOW(1)
000158 cf1e      	RJMP _RF_Write
                 
                 
                 	.CSEG
                 _delay_ms:
000159 9610      	adiw r26,0
00015a f039      	breq __delay_ms1
                 __delay_ms0:
                +
00015b ed80     +LDI R24 , LOW ( 0x7D0 )
00015c e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00015d 9701     +SBIW R24 , 1
00015e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00015f 95a8      	wdr
000160 9711      	sbiw r26,1
000161 f7c9      	brne __delay_ms0
                 __delay_ms1:
000162 9508      	ret
                 
                 __SAVELOCR2:
000163 931a      	ST   -Y,R17
000164 930a      	ST   -Y,R16
000165 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   0 r4 :   3 r5 :   1 r6 :   0 r7 :   4 
r8 :   4 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   5 r17:  15 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  21 r25:   6 r26:  34 r27:   6 r28:   3 r29:   1 r30:  84 r31:   7 
x  :   3 y  :  55 z  :   7 
Registers used: 23 out of 35 (65.7%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   4 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  15 brpl  :   0 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  18 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   5 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   3 
cpc   :   1 cpi   :   2 cpse  :   0 dec   :   5 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :   0 ld    :  21 ldd   :   6 ldi   :  63 lds   :   0 lpm   :   7 
lsl   :   2 lsr   :   0 mov   :   8 movw  :   5 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   2 ori   :   1 out   :  17 
pop   :   0 push  :   0 rcall :  43 ret   :  14 reti  :   1 rjmp  :  41 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :  12 sbic  :   2 
sbis  :   4 sbiw  :   6 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  29 std   :   2 
sts   :   0 sub   :   0 subi  :   2 swap  :   0 tst   :   1 wdr   :   1 

Instructions used: 37 out of 114 (32.5%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002cc    702     14    716    8192   8.7%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
